#! /usr/bin/env ruby

Main {
##
#
  edit_config_file! <<-__
    campfire:
      domain: YOUR_CAMPFIRE_DOMAIN
      token: YOUR_CAMPFIRE_API_TOKEN
      room: YOUR_CAMPFIRE_ROOM_NAME

    commands:
      - system
      - builtin
  __


  option('--force', '-f')

##
#
  def run
    load_commands!
    load_room!
    run_command! if argv.first =~ %r|^/| unless argv.empty?
  end

  def load_commands!
    FBomb::Command.load(config[:commands])
  end

  def load_room!
    @domain, @token, room = parse_config
    # parse the env varible (don't eval b/c its scary) and then get the matching
    # ENV var for the token if the token starts with ENV[
    @token = ENV[$1] if @token.match(/^ENV\[[\'\"](.*)[\'\"]\]/)
    @campfire = FBomb::Campfire.new(@domain, :token => @token)
    @campfire.token = @token
    @room = @campfire.room_for(room)
    FBomb::Command.room = @room
  end
  
  def parse_config
    config[:campfire].slice(:domain, :token, :room).values.collect do |value|
      parse_config_from_env(value)
    end
  end
  
  def parse_config_from_env(value)
    value.match(/^ENV\[[\'\"](.*)[\'\"]\]/) ? ENV[$1] : value
  end

  def run_command!
    path, args = argv
    commands = FBomb::Command.table
    command = commands[path] or abort("no such command #{ path }")
    #FBomb::Command.room = nil unless params['force'].given?
    command.call(*args)
    exit
  end

##
#
  mode(:shell) do
    def run
      load_commands!
      load_room!
      require 'pry'
      Pry.hooks[:before_session] = proc{}
      prompt = "#{ config.campfire.domain }[#{ config.campfire.room }] >> "
      Pry.config.prompt = proc{|*a| prompt } 
      binding.pry
    end

    def method_missing(method, *args, &block)
      ivar = "@#{ method }"
      super unless instance_variable_defined?(ivar)
      instance_variable_get(ivar)
    end
  end

##
#
  mode(:run) do
    def run
      load_commands!
      load_room!
      drop_fbombs!
    end

    def drop_fbombs!
      FBomb::Command.room = @room
      @room.join
      at_exit{ @room.leave }
      # dickburt says 'howdy folks' everytime it reconnects, maybe 2-5 times/day
      #FBomb::Command.table["/in_da_house"].call

      url = URI.parse("http://#{ @token }:x@streaming.campfirenow.com//room/#{ @room.id }/live.json")

      trap('INT'){ @room.leave; exit }

      loop do
        logging_errors do
          
          Yajl::HttpStream.get(url, "User-Agent" => '') do |message|
            case message['type'].to_s
              when 'TextMessage'
                body = message['body'].to_s
                tokens = body.scan(%r/[^\s]+/)
                arg, *args = tokens

                if arg =~ %r|^\s*/|
                  path = arg.strip
                  command = FBomb::Command.table[path]
                  if command
                    logging_errors do
                      logger.info("#{ path } #{ args.join(' ') }")
                      command.call(*args)
                    end
                  end
                end
              end
           end
          sleep(rand(42))
        end
      end
    end
  end

##
#
  mode(:setup) do
    def run
      puts self.class.config_path
    end
  end

##
#
  def logging_errors(&block)
    begin
      block.call()
    rescue Yajl::HttpStream::HttpError => e
      m, c, b = e.message, e.class, Array(e.backtrace).join("\n")
      rand_sleep = rand(42)
      logger.error("#{ m }(#{ c })\n#{ b }")
      logger.error("trying again in #{rand_sleep} seconds...")
      sleep(rand_sleep)
    rescue Object => e
      raise if e.is_a?(SystemExit)
      m, c, b = e.message, e.class, Array(e.backtrace).join("\n")
      logger.error("#{ m }(#{ c })\n#{ b }")
    end
  end
}

BEGIN{
  bindir = File.expand_path(File.dirname(__FILE__))
  srcdir = File.dirname(bindir)
  libdir = File.join(srcdir, 'lib')
  lib = File.join(libdir, 'fbomb.rb')
  require(test(?s, lib) ? lib : 'fbomb')
}
